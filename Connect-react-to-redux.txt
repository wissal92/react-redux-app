*******************
REACT-REDUX LIBRARY
*******************
=> TIES OUR REACT COMPONENTS TOGETHER TO REDUX. IT CONSISTS OF TWO CORE ITEMS:

1) THE PROVIDER COMPONENT => attaches app to store and its is utilized in our app route
by wrapping our entire app. This is how the provider component attaches our app to 
the redux store.

ex: <PROVIDER store={ourStore}>
      <App/>
    </Provider>

2)CONNECT FUNCTION => wraps our component so it's connected to the redux store.

ex: export default connect(mapStateToProps, mapDispatchToProps)(OurComponent);


******************
USEFUL TIPS
*****************
+ EVERY TIME THE COMPONENT IS UPDATED, THE mapStateToProps FUNCTIONS IS CALLED.
SO IF WE ARE DOING SOMETHING EXPENSIVE IT IS BETTER TO USE A LIBRARY LIKE RESELECT
FOR MEMOIZING.

********************
INITIAL REDUX SETUP
********************
1)Create action
2)Create reducer
3)Create root reducer
4)Configure store
5)instantiate store
6)connect component
7)pass props via connect
8)dispatch action


*****************
ADDING FEATURES
*****************
1)Create action
2)Enhance reducer
3)Connect component
4)Dispatch Action


******************
  REDUX-THUNK
*****************
thunk => is a function that wraps an expression to delay its evaluation.
thunks enable us to avoid directly causing side effects in our actions, action creators
or components. instead anything impure is wrapped in a thunk => by transferring our 
side effects in a single point in the redux loop helps us a lot to debug our code.


+ MIDDLEWARES ARE NOT REQUIRED TO SUPPORT ASYNC IN REDUX BUT IT IS BETTER TO USE THEM
SO THAT WE WOULD NOT HAVE TO PASS DISPATCH TO EACH CALL. THEY ARE INJECTED FOR US by
THE THUNK MIDDLEWARE.
